generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnneeUniversitaire {
  auId Int @id @default(autoincrement())

  au String

  startDate DateTime?
  endDate   DateTime?

  debutSemestrePair DateTime?
  finSemestrePair   DateTime?

  debutSemestreInpair DateTime?
  finSemestreInpair   DateTime?
  Inscription         Inscription[]
  creneauxProfesseur CreneauLibre[]

  @@map("annnee_universitaire")
}

enum Role {
  ADMIN
  PROFESSOR
  STUDENT
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          Role     @default(ADMIN)
  createdAt     DateTime
  updatedAt     DateTime

  person   Person?
  sessions Session[]
  accounts Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@map("verification")
}

model Person {
  personId  String  @id @default(cuid())
  lastname  String
  firstname String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  professor Professor?
  student   Student?
  admin     Admin?

  @@map("person")
}

model Admin {
  adminId String @id @default(cuid())

  person   Person @relation(fields: [personId], references: [personId], onDelete: Cascade)
  personId String @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("admin")
}

model Professor {
  professorId String @id @default(cuid())

  person   Person @relation(fields: [personId], references: [personId], onDelete: Cascade)
  personId String @unique

  creneau CreneauLibre[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("professor")
}

model Mention {
  mentionId       Int     @id @default(autoincrement())
  nom             String
  annee_fondation Int?
  responsable     String?
  logo            String?

  salles      MentionSalle[]
  inscription Inscription[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("mention")
}

model Niveau {
  niveauId Int    @id @default(autoincrement())
  intitule String

  inscription Inscription[]
}

model Parcours {
  parcoursId Int    @id @default(autoincrement())
  name       String

  lft Int
  rgt Int

  inscription Inscription[]

  @@index([lft])
  @@index([rgt])
  @@map("parcours")
}

model MentionSalle {
  salle     Salle   @relation(fields: [salleId], references: [salleId], onDelete: Cascade)
  salleId   Int
  mention   Mention @relation(fields: [mentionId], references: [mentionId], onDelete: Cascade)
  mentionId Int

  assignedAt DateTime @default(now())

  @@id([salleId, mentionId])
  @@map("mentionSalle")
}

model Salle {
  salleId  Int     @id @default(autoincrement())
  nom      String
  capacite Int
  photo    String?

  latitude  Float?
  longitude Float?

  equipments EquipmentSalle[]
  mentions   MentionSalle[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("salle")
}

model EquipmentSalle {
  equipment   Equipment @relation(fields: [equipmentId], references: [equipmentId], onDelete: Cascade)
  equipmentId Int

  salle   Salle @relation(fields: [salleId], references: [salleId], onDelete: Cascade)
  salleId Int

  assignedAt DateTime @default(now())

  @@id([equipmentId, salleId])
}

model Equipment {
  equipmentId   Int    @id @default(autoincrement())
  equipmentType String

  salles EquipmentSalle[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("equipements")
}

model Student {
  studentId String @id @default(cuid())

  person   Person @relation(fields: [personId], references: [personId], onDelete: Cascade)
  personId String @unique

  inscription Inscription[]

  createdAt DateTime?
  updatedAt DateTime?

  @@map("student")
}

model Inscription {
  inscriptionId Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  studentId String

  mention   Mention @relation(fields: [mentionId], references: [mentionId], onDelete: Cascade)
  mentionId Int     @unique

  niveau   Niveau @relation(fields: [niveauId], references: [niveauId], onDelete: Cascade)
  niveauId Int    @unique

  parcours   Parcours @relation(fields: [parcoursId], references: [parcoursId], onDelete: Cascade)
  parcoursId Int      @unique

  au   AnneeUniversitaire @relation(fields: [auId], references: [auId], onDelete: Cascade)
  auId Int

  @@index(mentionId)
  @@index(parcoursId)
  @@index(niveauId)
  @@map("inscription")
}

model UE {
  ueId Int    @id @default(autoincrement())
  nom  String

  ecue Ecue[]

  @@map("ue")
}

model Ecue {
  ecueId    Int      @id @default(autoincrement())
  nom       String
  credits   Int
  chapitres String[]

  ue   UE  @relation(fields: [ueId], references: [ueId], onDelete: Cascade)
  ueId Int

  @@map("ecue")
}

model CreneauLibre {
  creneauLibreId Int @id @default(autoincrement())

  creneau Creneau @relation(fields: [creneauId], references: [creneauId], onDelete: Cascade)
  creneauId Int

  professor Professor @relation(fields: [professorId], references: [professorId], onDelete: Cascade)
  professorId String

  au AnneeUniversitaire @relation(fields: [auId], references: [auId], onDelete: Cascade)
  auId Int


  @@map("creneau_libre")
}

model Creneau {
  creneauId Int       @id @default(autoincrement())
  startTime  DateTime
  endTime    DateTime
  dayName    DayOfWeek

  professor CreneauLibre[]
}

enum DayOfWeek {
  LUNDI
  MARDI
  MERCREDI
  JEUDI
  VENDREDI
  SAMEDI
  DIMANCHE
}
